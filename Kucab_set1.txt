#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
from  numpy.linalg import svd
import matplotlib.pyplot as plt
#funkcje dane
def Is_GS(n):
  x = np.random.rand(2)+1.j*np.random.rand(2)
  x = x/np.sqrt(np.vdot(x,x))
  v = np.zeros(2**n,dtype=np.complex128)
  v[0] = x[0]
  v[2**n-1] = x[1]
  v = np.reshape(v,list(np.repeat(2,n)))
  return v

def EV_1s(psi,s,op):
   n = len(psi.shape)
   psiop = np.tensordot(op,psi,axes=((1,),(s,)))
   psiop = np.transpose(np.reshape(psiop,(2,2**(s),2**(n-s-1))),(1,0,2))
   EV = np.vdot(np.reshape(psi,-1),np.reshape(psiop,-1))
   return np.real(EV)

def EV_2s(psi,s,op):
   n = len(psi.shape)
   psiop = np.tensordot(op,psi,axes=((2,3),(s,s+1)))
   psiop = np.transpose(np.reshape(psiop,(4,2**(s),2**(n-s-2))),(1,0,2))
   EV = np.vdot(np.reshape(psi,-1),np.reshape(psiop,-1))
   return np.real(EV)

def random(n):
  x = np.random.rand(2**n)+1.j*np.random.rand(2**n)
  x = x/np.sqrt(np.vdot(x,x))
  x = np.reshape(x,list(np.repeat(2,n)))
  return x


# In[2]:


#Funkcje tak naprawdę dane z pierwszych zadań, Te funkcje od razu robią pomijanie bardzo małych
#wartości osobliwych w celu zoptymalizowania pracy kodu
def to_left_can_first(psi):
    sv = psi.shape 
    n = psi.ndim
    psi = np.reshape(psi,(sv[0],np.prod(sv[1:]))) 
    [u,s,vh] = np.linalg.svd(psi,full_matrices=False)
    s=s[s>1.e-15]
    D = s.size 
    tempu = u[:,:D]
    tempv = vh[:D,:]
    psir = np.diag(s)@tempv
    psir = np.reshape(psir,((D,)+sv[1:]))  
    return tempu,psir 
def to_left_can_next(psi): 
    sv = psi.shape 
    n = psi.ndim 
    psi = np.reshape(psi,(sv[0]*sv[1],np.prod(sv[2:]))) 
    [u,s,vh] = np.linalg.svd(psi,full_matrices=False)
    s=s[s>1.e-15]
    D = s.size
    tempu = u[:,:D]
    tempv = vh[:D,:]
    psir = np.diag(s)@tempv 
    psir = np.reshape(psir,((D,)+sv[2:]))  
    tempu = np.reshape(tempu, (sv[0],sv[1],D))
    return tempu,psir 
def LCMPS(psi):
    n = len(np.shape(psi))
    psi_temp = psi
    mps = []
    [u1, psi_t] = to_left_can_first(psi_temp)
    mps.append(u1)
    for i in range (n-2):
        [u, psi_t] = to_left_can_next(psi_t)
        mps.append(u)
    mps.append(psi_t)
    return mps
#Wszystko powyżej jest potrzebne aby wygenerować MPSa
def bond_dim(psi):
    dim = []
    dim.append(np.shape(psi[0])[0])
    for i in range(1,len(psi)-1):
        dim.append(np.shape(psi[i])[2])
    return dim
#Powyżej funkcja do sprawdzania bond dimension, działa teżdla MCMPS


# In[3]:


def to_right_can_first(psi):
    sv = psi.shape
    n = psi.ndim 
    psi = np.reshape(psi, (np.prod(sv[:-1]),sv[-1]))
    [u,s,vh] = np.linalg.svd(psi,full_matrices=False) 
    s=s[s>1.e-15]
    D = s.size
    tempu = u[:,:D]
    tempv = vh[:D,:]
    psit = tempu@np.diag(s)
    psit = np.reshape(psit,((sv[:-1]+(D,))))   
    return psit, tempv 
def to_right_can_next(psi): 
    sv = psi.shape 
    n = psi.ndim 
    psi = np.reshape(psi,(np.prod(sv[:-2]),sv[-1]*sv[-2]))
    [u,s,vh] = np.linalg.svd(psi,full_matrices=False) 
    s=s[s>1.e-15]
    D = s.size
    tempu = u[:,:D]
    tempv = vh[:D,:]
    psir = tempu@np.diag(s)
    psir = np.reshape(psir, (sv[:-2]+(D,)))
    tempv = np.reshape(tempv,(D,sv[-2],sv[-1]))
    return psir, tempv 
def RCMPS(psi):
    n = len(np.shape(psi)) 
    psi_temp = psi
    mps = []
    [psi_t, v1] = to_right_can_first(psi_temp)
    mps.append(v1)
    for i in range (n-2):
        [psi_t, v1] = to_right_can_next(psi_t)
        mps.insert(0,v1)
    mps.insert(0,psi_t)
    return mps
#Powyżej przepisana funkcja LCMPS tak, aby robiła Right canonical mpsa, jest to robione analogicznie
#jak dla LCMPS, właściwie jest to funkcja przekopiowana i napisał ją Pan


# In[4]:


#zadanie 6- mixed canonical MPS tworzę w taki sposób, że jeżeli ortogonality center mam w J, to
#mam J-1 macierzy U po lewej oraz N-j-2 macierzy V po prawej, a w środku ortogonality center. Czyli robię
#LCMPS J-1 razy, potem z tego co zostaje N-j-2 RCMPS i mam MCMPS
def MCMPS(psi, j): 
    n = len(np.shape(psi))  
    r = []
    tot = []
    if j > n-1 or j<0:
        print("jesteś poza tensorem, spróbuj jeszcze raz")
        return -1
    if j == 0:
        print("Uwaga, dla j=0 'ortogonality center' jest miejscem wysuniętym najbardziej na lewo, więc tak naprawdę to będzie RCMPS, użyj tej funkcji")
        return 0
    if j == n-1:
        print("Uwaga, dla j=0 'ortogonality center' jest miejscem wysuniętym najbardziej na prawo, więc tak naprawdę to będzie LCMPS, użyj tej funkcji")
        return 0
    else:
        [u, psi_l] = to_left_can_first(psi)
        tot.append(u) #tu wpisuje pierwsze u
        for i in range(1,j):
            [u, psi_l] = to_left_can_next(psi_l)
            tot.append(u) #tu wpisuje każde kolejne u
        [psi_r, v] = to_right_can_first(psi_l)
        r.append(v)
        for i in range(n-(j+2)):
            [psi_r, v] = to_right_can_next(psi_r)
            r.insert(0,v)
        tot.append(psi_r) #tu wpisuje ort. center
        tot.extend(r) #tu wpisuje każde r
        return tot


# In[5]:


def MCMPScheck(psi,j):
    norma = []
    norma.append(np.einsum('ji,jk->ik',psi[0],np.conjugate(psi[0]))) #tu zwijam 1 tensor z lewej
    for i in range(1,len(psi)-1):
        if(i < j):
            norma.append(np.einsum('ijk,ijl->kl',psi[i],np.conjugate(psi[i]))) #wszystkie lewe do ort.
        elif(i > j):
            norma.append(np.einsum('ijk,ljk->il',psi[i],np.conjugate(psi[i])))#wszystkie prawe po ort do last
    norma.append(np.einsum('ij,kj->ik',psi[len(psi)-1],np.conjugate(psi[len(psi)-1])))#last
    return norma
def MCMPSnorm(psi,j):
    return np.einsum('ijk,ijk',psi[j],np.conjugate(psi[j]))

#macierze i tensory
s_z = [[1.,0],[0.,-1.]]
s_z2 = np.einsum('ij,jk->ik',s_z,s_z)#Z^2 do wariancji 1 nóżka
Z = np.einsum('ij,kl->ikjl',s_z,s_z)
Z2 = np.einsum('ikjl,jlab->ikab',Z,Z) #Z^2 do wariancji 2 nóżki


# In[6]:


#sprawdzenie czy mps jest OK, wygląda jakby był, liczę wszystkie zwężenia
x = random(7)
y = MCMPS(x,3)
test = MCMPScheck(y,3)
for i in range(len(test)):
    sv = np.shape(test[i])
    d = sv[0]
    print("shape of a tensor  is" +str(sv))
    print("wynik = "+str(np.linalg.norm(test[i]-np.eye(d))))
print("wymiary 'więzów' ")
print(bond_dim(y))
print("norma: ")
print(MCMPSnorm(y,3))
#tu sobie sprawdzam czy rzeczywiście mam trunkacje czy nie 
x = Is_GS(7)
y = MCMPS(x,3)
test = MCMPScheck(y,3)
for i in range(len(test)):
    sv = np.shape(test[i])
    d = sv[0]
    print("shape of a tensor  is" +str(sv))
    print("wynik = "+str(np.linalg.norm(test[i]-np.eye(d))))
print("wymiary 'więzów' ")
print(bond_dim(y))
print("norma: ")
print(MCMPSnorm(y,3))


# In[7]:


#Zadanie 7
#start = time
def E_1opt(psi, j, o): 
    temp = MCMPS(psi,j)
    ps = temp[j]
    cps = np.conjugate(temp[j])
    c = complex(np.einsum('ikj,kl,ilj',ps,o,cps,optimize='greedy')) #tutaj sobie sprawdzam flagę greedy
    return c.real
def E_1(psi, j, o): 
    temp = MCMPS(psi,j)
    ps = temp[j]
    cps = np.conjugate(temp[j])
    c = complex(np.einsum('ikj,kl,ilj',ps,o,cps))
    return c.real


# In[8]:


import time
x=random(7)
start_time = time.time()
print(E_1(x,3,s_z)," robił ", (time.time() - start_time))
start_time = time.time()
print(E_1opt(x,3,s_z)," robił ", (time.time() - start_time)) #wychodzi na to że czasami nawet tracę na czasie


# In[9]:


def E_2(psi, j, o): 
    temp = MCMPS(psi,j)
    ps = temp[j]
    ps1 = temp[j+1]
    cps = np.conjugate(temp[j])
    cps1 = np.conjugate(temp[j+1])   
    if(j==len(temp)-2):
        s = complex(np.einsum('iaj,ibk,acbd,jc,kd',ps,cps,o,ps1,cps1))
    else:
        s = complex(np.einsum('iaj,ibk,acbd,jcl,kdl',ps,cps,o,ps1,cps1))
    return s.real
def E_2opt(psi, j, o): #tutaj też sprawdzam flagę greedy
    temp = MCMPS(psi,j)
    ps = temp[j]
    ps1 = temp[j+1]
    cps = np.conjugate(temp[j])
    cps1 = np.conjugate(temp[j+1])
    s = complex(np.einsum('iaj,ibk,acbd,jcl,kdl',ps,cps,o,ps1,cps1,optimize = 'greedy'))
    return s.real


# In[10]:


x=random(7)
start_time = time.time()
print(E_2(x,3,Z)," robił ", (time.time() - start_time))
start_time = time.time()
print(E_2opt(x,3,Z)," robił ", (time.time() - start_time))
#tutaj czasami zyskuję, czasami tracę na czasie


# In[11]:


#sprawdzenie wartości średnich dla 2 nóg
x = random(7)
print(EV_2s(x,3,Z) - E_2(x,3,Z))
print(EV_1s(x,3,s_z) - E_1(x,3,s_z))
print(EV_2s(x,3,Z2) - E_2(x,3,Z2))
print(EV_1s(x,3,s_z2) - E_1(x,3,s_z2))


# In[12]:


tabiexp=[]
tabivar=[]
tabi = []
for i in range(2,7): #dla i = 1 defacto nie istnieje mixed canonical mps, bo jak mam 2 macierze to 
    #zawsze jestesmy albo left albo right, dlatego ten przypadek pomijam
    exp=0.
    var = 0.
    for j in range(100):
        temp = random(2*i)
        exp = exp + E_2(temp, i,Z)
        var = var + E_2(temp, i,Z2)
    var = var/100.
    exp = exp/100.
    tabiexp.append(exp)
    tabivar.append(var-exp*exp)
    tabi.append(2*(i))


# In[13]:


wyk1 = plt.plot(tabi,tabiexp, color="red")
plt.ylim(-0.1,0.1)
plt.show(wyk1)


# In[14]:


wyk2 = plt.plot(tabi,tabivar, color="red")
plt.ylim(0,2)
plt.show(wyk2)


# In[15]:


#1 nożka random
tabiexp1=[]
tabivar1=[]
tabi1 = []
for i in range(2,7):
    exp=0.
    var = 0.
    for j in range(100):
        temp = random(2*i)
        var = var + E_1(temp,i,s_z2)
        exp = exp + E_1(temp,i,s_z) 
    var = var/100
    exp = exp/100
    tabiexp1.append(exp)
    tabivar1.append(var-exp*exp)
    tabi1.append(2*i)


# In[16]:


wyk3 = plt.plot(tabi1,tabivar1, color="red")
plt.ylim(0,2)
plt.show(wyk3)


# In[25]:


wyk4 = plt.plot(tabi1,tabiexp1, color="red")
plt.ylim(-0.1,0.1)
plt.show(wyk4)


# In[18]:


#2 nóżki Ising
tabiexpIS=[]
tabivarIS=[]
tabiIS = []
for i in range(2,7):
    exp=0.
    var = 0.
    for j in range(100):
        temp =Is_GS(2*i)
        exp = exp + E_2(temp, i,Z)
        var = var + E_2(temp, i,Z2)
    var = var/100
    exp = exp/100
    tabiexpIS.append(exp)
    tabivarIS.append(var-exp*exp)
    tabiIS.append(2*i)


# In[19]:


wyk5 = plt.plot(tabiIS,tabivarIS, color="red")
plt.show(wyk5)


# In[20]:


wyk6 = plt.plot(tabiIS,tabiexpIS, color="red")
plt.show(wyk6)


# In[21]:


#1 nożka Ising
tabiexp1IS=[]
tabivar1IS=[]
tabi1IS = []
for i in range(2,7):
    exp=0.
    var = 0.
    for j in range(100):
        temp = Is_GS(2*i)
        var = var + E_1(temp,i,s_z2)
        exp = exp + E_1(temp,i,s_z) 
    var = var/100
    exp = exp/100
    tabiexp1IS.append(exp)
    tabivar1IS.append(var-exp*exp)
    tabi1IS.append(2*i)


# In[22]:


wyk7 = plt.plot(tabi1IS,tabivar1IS, color="red")
plt.show(wyk7)


# In[23]:


wyk8 = plt.plot(tabi1IS,tabiexp1IS, color="red")
plt.show(wyk8)


# In[24]:


#tu sobie sprawdzam czy wyniki są ok dla przypadku gdy wpinam w 2 nóżkę (lub 2+3)
print("wyniki funkcji danych dla Random 2 site")
test = 0
kolos = 0

for i in range(100):
    temp = random(12)
    test = test + EV_2s(temp,6,Z2)
    kolos = kolos + EV_2s(temp,6,Z)
kolos = kolos/100
test = test/100
print(test - kolos*kolos)
print(kolos)
print("wyniki funkcji danych dla Random 1 site")
test = 0
kolos = 0

for i in range(100):
    temp = random(12)
    test = test + EV_1s(temp,6,s_z2)
    kolos = kolos + EV_1s(temp,6,s_z)
kolos = kolos/100
test = test/100
print(test - kolos*kolos)
print(kolos)
print("wyniki funkcji danych dla ISING 2 site")
test = 0
kolos = 0

for i in range(100):
    temp = Is_GS(12)
    test = test + EV_2s(temp,6,Z2)
    kolos = kolos + EV_2s(temp,6,Z)
kolos = kolos/100
test = test/100
print(test - kolos*kolos)
print(kolos)
print("wyniki funkcji danych dla ISING 1 site")
for i in range(100):
    temp = Is_GS(12)
    test = test + EV_1s(temp,6,s_z2)
    kolos = kolos + EV_1s(temp,6,s_z)
kolos = kolos/100
test = test/100
print(test - kolos*kolos)
print(kolos)
print("mam zgodność z tym co narysowałem na wykresach")


# In[ ]:




